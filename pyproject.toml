[dependency-groups]
dev = [
    "bandit; python_version >= '3.7'",
    "cohesion",
    # The coverage==3.5.3 is difficult to analyze its dependencies by dependencies management tool,
    # so we should avoid 3.5.3 or lower.
    # - Command: "pipenv install --skip-lock" fails 
    #   since it tries to parse legacy package metadata and raise InstallError
    #   · Issue #5595 · pypa/pipenv
    #   https://github.com/pypa/pipenv/issues/5595
    "coverage>=3.5.4",
    # The dlint less than 0.14.0 limits max version of flake8.
    # - dlint/requirements.txt at 0.13.0 · dlint-py/dlint
    #   https://github.com/dlint-py/dlint/blob/0.13.0/requirements.txt#L1
    "dlint>=0.14.0",
    # To the docformatter load pyproject.toml settings:
    "docformatter[tomli]; python_version < '3.11'",
    "docformatter; python_version >= '3.11'",
    "dodgy",
    "exceptiongroup; python_version <= '3.10'",
    "factory_boy",
    "fixturefilehandler",
    # The hacking depends flake8 ~=6.1.0 or ~=5.0.1 or ~=4.0.1.
    # We should avoid the versions that is not compatible with the hacking,
    # considering the speed of dependency calculation process
    "flake8!=6.0.0,!=5.0.0,>=4.0.1",
    # To replace E501 in pycodestyle with B950 in flake8-bugbear:
    # - Using Black with other tools - Black 25.1.0 documentation
    #   https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#bugbear
    "flake8-bugbear",
    # To use flake8 --radon-show-closures
    "flake8-polyfill",
    # To use pyproject.toml for Flake8 configuration
    "Flake8-pyproject",
    # Latest hacking depends on legacy version of flake8, and legacy hacking doesn't narrow flake8 version.
    # When unpin hacking, it has possibility to install too legacy version of hacking.
    "hacking>=5.0.0; python_version >= '3.8'",
    "invokelint>=0.8.1",
    # The mypy 1.16.0 seems to not support returns:
    #   $ mypy zaimcsvconverter --show-traceback 
    #   /workspace/.venv/lib/python3.13/site-packages/returns/primitives/hkt.py:87: error: INTERNAL ERROR -- Please try using mypy master on GitHub:
    #   https://mypy.readthedocs.io/en/stable/common_issues.html#using-a-development-mypy-build
    #   Please report a bug at https://github.com/python/mypy/issues
    #   version: 1.16.0
    #   Traceback (most recent call last):
    #     File "mypy/checker.py", line 577, in accept
    #     File "mypy/nodes.py", line 1396, in accept
    #     File "mypy/checker.py", line 3079, in visit_assignment_stmt
    #     File "mypy/checker.py", line 3306, in check_assignment
    #     File "mypy/checker.py", line 3432, in check_compatibility_all_supers
    #     File "mypy/checker.py", line 3578, in node_type_from_base
    #     File "mypy/checkmember.py", line 378, in analyze_instance_member_access
    #     File "mypy/checkmember.py", line 564, in analyze_member_var_access
    #     File "mypy/checkmember.py", line 935, in analyze_var
    #     File "/workspace/.venv/lib/python3.13/site-packages/returns/contrib/mypy/_typeops/fallback.py", line 25, in decorator
    #       return function(*args, **kwargs)
    #     File "/workspace/.venv/lib/python3.13/site-packages/returns/contrib/mypy/_features/kind.py", line 65, in attribute_access
    #       return analyze_member_access(
    #           ctx.context.name,  # type: ignore
    #       ...<8 lines>...
    #           in_literal_context=exprchecker.is_literal_context(),
    #       )
    #   TypeError: 'msg' is an invalid keyword argument for analyze_member_access()
    #   /workspace/.venv/lib/python3.13/site-packages/returns/primitives/hkt.py:87: : note: use --pdb to drop into pdb
    "mypy<1.16.0",
    # Currently, migration steps is difficult
    "pydantic>=2.0.0",
    "pylint",
    "pytest",
    "pytest-resource-path",
    "pyvelocity; python_version >= '3.9'",
    # Since the radon can't run when use pytest log format:
    # - Radon can't run when use pytest log fornat: `$()d` · Issue #251 · rubik/radon
    #   https://github.com/rubik/radon/issues/251
    "radon<6.0.0",
    "returns",
    "ruff",
    "semgrep;python_version>='3.9' or platform_system=='Linux'",
    "types-invoke",
    "typing-extensions; python_version <= '3.10'",
    "xenon",
]

[project]
name = "zaimcsvconverter"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Yukihiko Shinoda", email = "yuk.hik.future@gmail.com"},
]
maintainers = [
    {name = "Yukihiko Shinoda", email = "yuk.hik.future@gmail.com"},
]
dependencies = [
    # To collect error when validate input record
    "errorcollector",
    # To read Kami CSV
    "godslayer",
    # To generate table name by model class name
    "inflector",
    # To uniquify undefined content errors
    "numpy",
    # To manage stores and items by database (now using SQLite)
    "sqlalchemy",
    # To read yaml file as config
    "yamldataclassconfig",
]

[tool.setuptools.packages.find]
include = ["zaimcsvconverter", "zaimcsvconverter.*", "pydantictypes", "pydantictypes.*"]

[tool.bandit.assert_used]
skips = ["tests/*.py"]

[tool.coverage.report]
exclude_also = [
    # Assume `if TYPE_CHECKING: ... else: ...` block is covered · Issue #831 · nedbat/coveragepy
    #   https://github.com/nedbat/coveragepy/issues/831#issuecomment-517778185
    "if TYPE_CHECKING:",
    # Pylint will detect instead:
    # - abstract-method / W0223 - Pylint 2.17.0-dev0 documentation
    #   https://pylint.readthedocs.io/en/latest/user_guide/messages/warning/abstract-method.html
    "raise NotImplementedError",
]

[tool.coverage.run]
source = ["zaimcsvconverter", "pydantictypes"]

[tool.docformatter]
recursive = true
# For compatibility with Black
# - How to Configure docformatter — docformatter 1.7.5 documentation
#   https://docformatter.readthedocs.io/en/stable/configuration.html#a-note-on-options-to-control-styles
pre_summary_space = true
wrap-descriptions = 119
wrap-summaries = 119

[tool.flake8]
# @see https://github.com/psf/black/blob/master/README.md#line-length
max_line_length = 108
extend_ignore = [
  # For compatibility with Black:
  # - Using Black with other tools - Black 25.1.0 documentation
  #   https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#bugbear
  "E203",
  "E501",
  "E701",
  # 2025-05-24 Now openstack/hacking wasn't introduced into Ruff and sorting imports is mainly considered with isort.
  "H306",
  # Cohesion may be in experimental.
  "H601",
]
statistics = true
show_source = true
exclude = [
  ".venv",
]

[tool.mypy]
strict = true
plugins = [
  "pydantic.mypy",
  "returns.contrib.mypy.returns_plugin",
]

[[tool.mypy.overrides]]
module = [
    "factory",
    "inflector",
]
ignore_missing_imports = true

[tool.pylint.basic]
docstring-min-length = "7"

[tool.pylint.format]
max-line-length = 119

[tool.pylint.options]
# Since this rule against single responsibility principle.
# - python - Why does Pylint want two public methods per class? - Stack Overflow
#   https://stackoverflow.com/a/40258006/12721873
min-public-methods = "1"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_format = "%(asctime)s %(process)d %(levelname)s %(name)s:%(filename)s:%(lineno)d %(message)s"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.radon]
cc_min = "B"
show_complexity = true
show_mi = true

[tool.ruff]
line-length = 119

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # lint.pydocstyle
    # Reason: Docstring may be missed since docstring-min-length is set.
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    # Reason: First line may ends with function signature for expression.
    "D402",    # First line should not be the function’s “signature”
    # Reason: First line may ends with ":" for expression.
    "D415",    # First line should end with a period, question mark, or exclamation point
    # Reason: `Line too long` is checked by flake8-bugbear.
    "E501",    # Line too long ({width} > {limit})
    # Currently, there are too many Any types in the codebase
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed, These warnings are disabled by default
]
fixable = [
    "COM812",  # Trailing comma missing
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "I",       # isort
    "PT001",   # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT006",   # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
    "UP006",   # Use {} instead of {} for type annotations
    "UP015",   # Unnecessary open mode parameters
    "UP037",   # Remove quotes from type annotation
]
unfixable = [
    # When fix `return a and b != ""` as `return a and b`, mypy will report warning:
    #   error: Incompatible return value type (got "Union[Literal[False], str]", expected "bool")  [return-value]
    "PLC1901",
    # To handle mypy's bug in case when use Pydantic custom data type.
    "SIM108",  # Use ternary operator `extra_context = {} if extra_context is None else request.param` instead of `if`-`else`-block
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"
